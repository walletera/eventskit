// Code generated by mockery v2.42.2. DO NOT EDIT.

package fake

import (
	context "context"

	errors "github.com/walletera/message-processor/errors"
	fake "github.com/walletera/message-processor/fake"

	mock "github.com/stretchr/testify/mock"
)

// MockEventVisitor is an autogenerated mock type for the EventVisitor type
type MockEventVisitor struct {
	mock.Mock
}

type MockEventVisitor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEventVisitor) EXPECT() *MockEventVisitor_Expecter {
	return &MockEventVisitor_Expecter{mock: &_m.Mock}
}

// VisitFakeEvent provides a mock function with given fields: ctx, e
func (_m *MockEventVisitor) VisitFakeEvent(ctx context.Context, e fake.Event) errors.ProcessingError {
	ret := _m.Called(ctx, e)

	if len(ret) == 0 {
		panic("no return value specified for VisitFakeEvent")
	}

	var r0 errors.ProcessingError
	if rf, ok := ret.Get(0).(func(context.Context, fake.Event) errors.ProcessingError); ok {
		r0 = rf(ctx, e)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.ProcessingError)
		}
	}

	return r0
}

// MockEventVisitor_VisitFakeEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VisitFakeEvent'
type MockEventVisitor_VisitFakeEvent_Call struct {
	*mock.Call
}

// VisitFakeEvent is a helper method to define mock.On call
//   - ctx context.Context
//   - e fake.Event
func (_e *MockEventVisitor_Expecter) VisitFakeEvent(ctx interface{}, e interface{}) *MockEventVisitor_VisitFakeEvent_Call {
	return &MockEventVisitor_VisitFakeEvent_Call{Call: _e.mock.On("VisitFakeEvent", ctx, e)}
}

func (_c *MockEventVisitor_VisitFakeEvent_Call) Run(run func(ctx context.Context, e fake.Event)) *MockEventVisitor_VisitFakeEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(fake.Event))
	})
	return _c
}

func (_c *MockEventVisitor_VisitFakeEvent_Call) Return(_a0 errors.ProcessingError) *MockEventVisitor_VisitFakeEvent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventVisitor_VisitFakeEvent_Call) RunAndReturn(run func(context.Context, fake.Event) errors.ProcessingError) *MockEventVisitor_VisitFakeEvent_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEventVisitor creates a new instance of MockEventVisitor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEventVisitor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEventVisitor {
	mock := &MockEventVisitor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
