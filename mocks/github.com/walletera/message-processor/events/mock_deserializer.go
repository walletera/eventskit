// Code generated by mockery v2.42.2. DO NOT EDIT.

package events

import (
	mock "github.com/stretchr/testify/mock"
	events "github.com/walletera/message-processor/events"
)

// MockDeserializer is an autogenerated mock type for the Deserializer type
type MockDeserializer[Handler interface{}] struct {
	mock.Mock
}

type MockDeserializer_Expecter[Handler interface{}] struct {
	mock *mock.Mock
}

func (_m *MockDeserializer[Handler]) EXPECT() *MockDeserializer_Expecter[Handler] {
	return &MockDeserializer_Expecter[Handler]{mock: &_m.Mock}
}

// Deserialize provides a mock function with given fields: rawEvent
func (_m *MockDeserializer[Handler]) Deserialize(rawEvent []byte) (events.Event[Handler], error) {
	ret := _m.Called(rawEvent)

	if len(ret) == 0 {
		panic("no return value specified for Deserialize")
	}

	var r0 events.Event[Handler]
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (events.Event[Handler], error)); ok {
		return rf(rawEvent)
	}
	if rf, ok := ret.Get(0).(func([]byte) events.Event[Handler]); ok {
		r0 = rf(rawEvent)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(events.Event[Handler])
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(rawEvent)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDeserializer_Deserialize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Deserialize'
type MockDeserializer_Deserialize_Call[Handler interface{}] struct {
	*mock.Call
}

// Deserialize is a helper method to define mock.On call
//   - rawEvent []byte
func (_e *MockDeserializer_Expecter[Handler]) Deserialize(rawEvent interface{}) *MockDeserializer_Deserialize_Call[Handler] {
	return &MockDeserializer_Deserialize_Call[Handler]{Call: _e.mock.On("Deserialize", rawEvent)}
}

func (_c *MockDeserializer_Deserialize_Call[Handler]) Run(run func(rawEvent []byte)) *MockDeserializer_Deserialize_Call[Handler] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *MockDeserializer_Deserialize_Call[Handler]) Return(_a0 events.Event[Handler], _a1 error) *MockDeserializer_Deserialize_Call[Handler] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDeserializer_Deserialize_Call[Handler]) RunAndReturn(run func([]byte) (events.Event[Handler], error)) *MockDeserializer_Deserialize_Call[Handler] {
	_c.Call.Return(run)
	return _c
}

// NewMockDeserializer creates a new instance of MockDeserializer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDeserializer[Handler interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDeserializer[Handler] {
	mock := &MockDeserializer[Handler]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
