// Code generated by mockery v2.42.2. DO NOT EDIT.

package events

import (
	context "context"

	errors "github.com/walletera/message-processor/errors"

	mock "github.com/stretchr/testify/mock"
)

// MockEvent is an autogenerated mock type for the Event type
type MockEvent[Visitor interface{}] struct {
	mock.Mock
}

type MockEvent_Expecter[Visitor interface{}] struct {
	mock *mock.Mock
}

func (_m *MockEvent[Visitor]) EXPECT() *MockEvent_Expecter[Visitor] {
	return &MockEvent_Expecter[Visitor]{mock: &_m.Mock}
}

// Accept provides a mock function with given fields: ctx, visitor
func (_m *MockEvent[Visitor]) Accept(ctx context.Context, visitor Visitor) errors.ProcessingError {
	ret := _m.Called(ctx, visitor)

	if len(ret) == 0 {
		panic("no return value specified for Accept")
	}

	var r0 errors.ProcessingError
	if rf, ok := ret.Get(0).(func(context.Context, Visitor) errors.ProcessingError); ok {
		r0 = rf(ctx, visitor)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.ProcessingError)
		}
	}

	return r0
}

// MockEvent_Accept_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Accept'
type MockEvent_Accept_Call[Visitor interface{}] struct {
	*mock.Call
}

// Accept is a helper method to define mock.On call
//   - ctx context.Context
//   - visitor Visitor
func (_e *MockEvent_Expecter[Visitor]) Accept(ctx interface{}, visitor interface{}) *MockEvent_Accept_Call[Visitor] {
	return &MockEvent_Accept_Call[Visitor]{Call: _e.mock.On("Accept", ctx, visitor)}
}

func (_c *MockEvent_Accept_Call[Visitor]) Run(run func(ctx context.Context, visitor Visitor)) *MockEvent_Accept_Call[Visitor] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(Visitor))
	})
	return _c
}

func (_c *MockEvent_Accept_Call[Visitor]) Return(_a0 errors.ProcessingError) *MockEvent_Accept_Call[Visitor] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEvent_Accept_Call[Visitor]) RunAndReturn(run func(context.Context, Visitor) errors.ProcessingError) *MockEvent_Accept_Call[Visitor] {
	_c.Call.Return(run)
	return _c
}

// CorrelationID provides a mock function with given fields:
func (_m *MockEvent[Visitor]) CorrelationID() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CorrelationID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockEvent_CorrelationID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CorrelationID'
type MockEvent_CorrelationID_Call[Visitor interface{}] struct {
	*mock.Call
}

// CorrelationID is a helper method to define mock.On call
func (_e *MockEvent_Expecter[Visitor]) CorrelationID() *MockEvent_CorrelationID_Call[Visitor] {
	return &MockEvent_CorrelationID_Call[Visitor]{Call: _e.mock.On("CorrelationID")}
}

func (_c *MockEvent_CorrelationID_Call[Visitor]) Run(run func()) *MockEvent_CorrelationID_Call[Visitor] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEvent_CorrelationID_Call[Visitor]) Return(_a0 string) *MockEvent_CorrelationID_Call[Visitor] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEvent_CorrelationID_Call[Visitor]) RunAndReturn(run func() string) *MockEvent_CorrelationID_Call[Visitor] {
	_c.Call.Return(run)
	return _c
}

// DataContentType provides a mock function with given fields:
func (_m *MockEvent[Visitor]) DataContentType() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DataContentType")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockEvent_DataContentType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DataContentType'
type MockEvent_DataContentType_Call[Visitor interface{}] struct {
	*mock.Call
}

// DataContentType is a helper method to define mock.On call
func (_e *MockEvent_Expecter[Visitor]) DataContentType() *MockEvent_DataContentType_Call[Visitor] {
	return &MockEvent_DataContentType_Call[Visitor]{Call: _e.mock.On("DataContentType")}
}

func (_c *MockEvent_DataContentType_Call[Visitor]) Run(run func()) *MockEvent_DataContentType_Call[Visitor] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEvent_DataContentType_Call[Visitor]) Return(_a0 string) *MockEvent_DataContentType_Call[Visitor] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEvent_DataContentType_Call[Visitor]) RunAndReturn(run func() string) *MockEvent_DataContentType_Call[Visitor] {
	_c.Call.Return(run)
	return _c
}

// ID provides a mock function with given fields:
func (_m *MockEvent[Visitor]) ID() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockEvent_ID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ID'
type MockEvent_ID_Call[Visitor interface{}] struct {
	*mock.Call
}

// ID is a helper method to define mock.On call
func (_e *MockEvent_Expecter[Visitor]) ID() *MockEvent_ID_Call[Visitor] {
	return &MockEvent_ID_Call[Visitor]{Call: _e.mock.On("ID")}
}

func (_c *MockEvent_ID_Call[Visitor]) Run(run func()) *MockEvent_ID_Call[Visitor] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEvent_ID_Call[Visitor]) Return(_a0 string) *MockEvent_ID_Call[Visitor] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEvent_ID_Call[Visitor]) RunAndReturn(run func() string) *MockEvent_ID_Call[Visitor] {
	_c.Call.Return(run)
	return _c
}

// Serialize provides a mock function with given fields:
func (_m *MockEvent[Visitor]) Serialize() ([]byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Serialize")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEvent_Serialize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Serialize'
type MockEvent_Serialize_Call[Visitor interface{}] struct {
	*mock.Call
}

// Serialize is a helper method to define mock.On call
func (_e *MockEvent_Expecter[Visitor]) Serialize() *MockEvent_Serialize_Call[Visitor] {
	return &MockEvent_Serialize_Call[Visitor]{Call: _e.mock.On("Serialize")}
}

func (_c *MockEvent_Serialize_Call[Visitor]) Run(run func()) *MockEvent_Serialize_Call[Visitor] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEvent_Serialize_Call[Visitor]) Return(_a0 []byte, _a1 error) *MockEvent_Serialize_Call[Visitor] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEvent_Serialize_Call[Visitor]) RunAndReturn(run func() ([]byte, error)) *MockEvent_Serialize_Call[Visitor] {
	_c.Call.Return(run)
	return _c
}

// Type provides a mock function with given fields:
func (_m *MockEvent[Visitor]) Type() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Type")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockEvent_Type_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Type'
type MockEvent_Type_Call[Visitor interface{}] struct {
	*mock.Call
}

// Type is a helper method to define mock.On call
func (_e *MockEvent_Expecter[Visitor]) Type() *MockEvent_Type_Call[Visitor] {
	return &MockEvent_Type_Call[Visitor]{Call: _e.mock.On("Type")}
}

func (_c *MockEvent_Type_Call[Visitor]) Run(run func()) *MockEvent_Type_Call[Visitor] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEvent_Type_Call[Visitor]) Return(_a0 string) *MockEvent_Type_Call[Visitor] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEvent_Type_Call[Visitor]) RunAndReturn(run func() string) *MockEvent_Type_Call[Visitor] {
	_c.Call.Return(run)
	return _c
}

// NewMockEvent creates a new instance of MockEvent. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEvent[Visitor interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEvent[Visitor] {
	mock := &MockEvent[Visitor]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
