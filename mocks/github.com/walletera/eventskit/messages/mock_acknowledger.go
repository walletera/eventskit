// Code generated by mockery v2.42.2. DO NOT EDIT.

package messages

import (
	mock "github.com/stretchr/testify/mock"
	messages "github.com/walletera/eventskit/messages"
)

// MockAcknowledger is an autogenerated mock type for the Acknowledger type
type MockAcknowledger struct {
	mock.Mock
}

type MockAcknowledger_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAcknowledger) EXPECT() *MockAcknowledger_Expecter {
	return &MockAcknowledger_Expecter{mock: &_m.Mock}
}

// Ack provides a mock function with given fields:
func (_m *MockAcknowledger) Ack() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Ack")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAcknowledger_Ack_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ack'
type MockAcknowledger_Ack_Call struct {
	*mock.Call
}

// Ack is a helper method to define mock.On call
func (_e *MockAcknowledger_Expecter) Ack() *MockAcknowledger_Ack_Call {
	return &MockAcknowledger_Ack_Call{Call: _e.mock.On("Ack")}
}

func (_c *MockAcknowledger_Ack_Call) Run(run func()) *MockAcknowledger_Ack_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAcknowledger_Ack_Call) Return(_a0 error) *MockAcknowledger_Ack_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAcknowledger_Ack_Call) RunAndReturn(run func() error) *MockAcknowledger_Ack_Call {
	_c.Call.Return(run)
	return _c
}

// Nack provides a mock function with given fields: opts
func (_m *MockAcknowledger) Nack(opts messages.NackOpts) error {
	ret := _m.Called(opts)

	if len(ret) == 0 {
		panic("no return value specified for Nack")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(messages.NackOpts) error); ok {
		r0 = rf(opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAcknowledger_Nack_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Nack'
type MockAcknowledger_Nack_Call struct {
	*mock.Call
}

// Nack is a helper method to define mock.On call
//   - opts messages.NackOpts
func (_e *MockAcknowledger_Expecter) Nack(opts interface{}) *MockAcknowledger_Nack_Call {
	return &MockAcknowledger_Nack_Call{Call: _e.mock.On("Nack", opts)}
}

func (_c *MockAcknowledger_Nack_Call) Run(run func(opts messages.NackOpts)) *MockAcknowledger_Nack_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(messages.NackOpts))
	})
	return _c
}

func (_c *MockAcknowledger_Nack_Call) Return(_a0 error) *MockAcknowledger_Nack_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAcknowledger_Nack_Call) RunAndReturn(run func(messages.NackOpts) error) *MockAcknowledger_Nack_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAcknowledger creates a new instance of MockAcknowledger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAcknowledger(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAcknowledger {
	mock := &MockAcknowledger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
