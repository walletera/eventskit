// Code generated by mockery v2.42.2. DO NOT EDIT.

package messages

import (
	mock "github.com/stretchr/testify/mock"
	messages "github.com/walletera/eventskit/messages"
)

// MockConsumer is an autogenerated mock type for the Consumer type
type MockConsumer struct {
	mock.Mock
}

type MockConsumer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConsumer) EXPECT() *MockConsumer_Expecter {
	return &MockConsumer_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *MockConsumer) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockConsumer_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockConsumer_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockConsumer_Expecter) Close() *MockConsumer_Close_Call {
	return &MockConsumer_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockConsumer_Close_Call) Run(run func()) *MockConsumer_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConsumer_Close_Call) Return(_a0 error) *MockConsumer_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConsumer_Close_Call) RunAndReturn(run func() error) *MockConsumer_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Consume provides a mock function with given fields:
func (_m *MockConsumer) Consume() (<-chan messages.Message, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Consume")
	}

	var r0 <-chan messages.Message
	var r1 error
	if rf, ok := ret.Get(0).(func() (<-chan messages.Message, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() <-chan messages.Message); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan messages.Message)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConsumer_Consume_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Consume'
type MockConsumer_Consume_Call struct {
	*mock.Call
}

// Consume is a helper method to define mock.On call
func (_e *MockConsumer_Expecter) Consume() *MockConsumer_Consume_Call {
	return &MockConsumer_Consume_Call{Call: _e.mock.On("Consume")}
}

func (_c *MockConsumer_Consume_Call) Run(run func()) *MockConsumer_Consume_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConsumer_Consume_Call) Return(_a0 <-chan messages.Message, _a1 error) *MockConsumer_Consume_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConsumer_Consume_Call) RunAndReturn(run func() (<-chan messages.Message, error)) *MockConsumer_Consume_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConsumer creates a new instance of MockConsumer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConsumer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConsumer {
	mock := &MockConsumer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
