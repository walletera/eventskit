// Code generated by mockery v2.20.0. DO NOT EDIT.

package events

import mock "github.com/stretchr/testify/mock"

// MockDeserializer is an autogenerated mock type for the Deserializer type
type MockDeserializer[Visitor interface{}] struct {
	mock.Mock
}

// Deserialize provides a mock function with given fields: rawEvent
func (_m *MockDeserializer[Visitor]) Deserialize(rawEvent []byte) (Event[Visitor], error) {
	ret := _m.Called(rawEvent)

	var r0 Event[Visitor]
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (Event[Visitor], error)); ok {
		return rf(rawEvent)
	}
	if rf, ok := ret.Get(0).(func([]byte) Event[Visitor]); ok {
		r0 = rf(rawEvent)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Event[Visitor])
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(rawEvent)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockEventsDeserializer interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockEventsDeserializer creates a new instance of MockDeserializer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockEventsDeserializer[Visitor interface{}](t mockConstructorTestingTNewMockEventsDeserializer) *MockDeserializer[Visitor] {
	mock := &MockDeserializer[Visitor]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
