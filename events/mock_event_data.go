// Code generated by mockery v2.42.2. DO NOT EDIT.

package events

import mock "github.com/stretchr/testify/mock"

// MockEventData is an autogenerated mock type for the EventData type
type MockEventData struct {
	mock.Mock
}

type MockEventData_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEventData) EXPECT() *MockEventData_Expecter {
	return &MockEventData_Expecter{mock: &_m.Mock}
}

// DataContentType provides a mock function with given fields:
func (_m *MockEventData) DataContentType() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DataContentType")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockEventData_DataContentType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DataContentType'
type MockEventData_DataContentType_Call struct {
	*mock.Call
}

// DataContentType is a helper method to define mock.On call
func (_e *MockEventData_Expecter) DataContentType() *MockEventData_DataContentType_Call {
	return &MockEventData_DataContentType_Call{Call: _e.mock.On("DataContentType")}
}

func (_c *MockEventData_DataContentType_Call) Run(run func()) *MockEventData_DataContentType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEventData_DataContentType_Call) Return(_a0 string) *MockEventData_DataContentType_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventData_DataContentType_Call) RunAndReturn(run func() string) *MockEventData_DataContentType_Call {
	_c.Call.Return(run)
	return _c
}

// ID provides a mock function with given fields:
func (_m *MockEventData) ID() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockEventData_ID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ID'
type MockEventData_ID_Call struct {
	*mock.Call
}

// ID is a helper method to define mock.On call
func (_e *MockEventData_Expecter) ID() *MockEventData_ID_Call {
	return &MockEventData_ID_Call{Call: _e.mock.On("ID")}
}

func (_c *MockEventData_ID_Call) Run(run func()) *MockEventData_ID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEventData_ID_Call) Return(_a0 string) *MockEventData_ID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventData_ID_Call) RunAndReturn(run func() string) *MockEventData_ID_Call {
	_c.Call.Return(run)
	return _c
}

// Serialize provides a mock function with given fields:
func (_m *MockEventData) Serialize() ([]byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Serialize")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEventData_Serialize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Serialize'
type MockEventData_Serialize_Call struct {
	*mock.Call
}

// Serialize is a helper method to define mock.On call
func (_e *MockEventData_Expecter) Serialize() *MockEventData_Serialize_Call {
	return &MockEventData_Serialize_Call{Call: _e.mock.On("Serialize")}
}

func (_c *MockEventData_Serialize_Call) Run(run func()) *MockEventData_Serialize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEventData_Serialize_Call) Return(_a0 []byte, _a1 error) *MockEventData_Serialize_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEventData_Serialize_Call) RunAndReturn(run func() ([]byte, error)) *MockEventData_Serialize_Call {
	_c.Call.Return(run)
	return _c
}

// Type provides a mock function with given fields:
func (_m *MockEventData) Type() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Type")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockEventData_Type_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Type'
type MockEventData_Type_Call struct {
	*mock.Call
}

// Type is a helper method to define mock.On call
func (_e *MockEventData_Expecter) Type() *MockEventData_Type_Call {
	return &MockEventData_Type_Call{Call: _e.mock.On("Type")}
}

func (_c *MockEventData_Type_Call) Run(run func()) *MockEventData_Type_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEventData_Type_Call) Return(_a0 string) *MockEventData_Type_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventData_Type_Call) RunAndReturn(run func() string) *MockEventData_Type_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEventData creates a new instance of MockEventData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEventData(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEventData {
	mock := &MockEventData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
